# -*- coding: utf-8 -*-
"""
/***************************************************************************
 testOnePluginDialog
                                 A QGIS plugin
 This is only a test
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2023-11-21
        git sha              : $Format:%H$
        copyright            : (C) 2023 by Ian McHugh
        email                : imchugh00@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
__author__ = 'Ian McHugh/NetPMD'
__date__ = '2024-01-09'
__copyright__ = '(C) 2024 by Ian McHugh/NetPMD'


import asyncio
import os

from qgis.PyQt import uic
from qgis.PyQt import QtWidgets
from qgis.core import *

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'testOneModule_dialog_base.ui'))

value = ''
sector = 0
class testOnePluginDialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(testOnePluginDialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        self.comboBox.addItem('Stage 1 Testing - (Postal address)')
        self.comboBox.addItem('Stage 1 Testing - (Demand point)')
        self.comboBox.addItem('Stage 2 Testing - (Chamber)')
        self.comboBox.addItem('Stage 3 Testing - (Hut)')
        self.comboBox.addItem('Stage 3 Testing - (Cabinet)')
        self.comboBox.addItem('Stage 2 Testing - (Distribution)')
        self.comboBox.addItem('Stage 2 Testing - (Distribution segment)')
        self.comboBox.addItem('Stage 3 Testing - (Feeder)')
        self.comboBox.addItem('Stage 3 Testing - (Feeder segment)')
        self.comboBox.addItem('Stage 3 Testing - (Metro)')
        self.comboBox.addItem('Stage 3 Testing - (Metro segment)')
        self.pushButton.clicked.connect(self.startStatus)
        self.pushButton.clicked.connect(self.startMagic)
        self.pushButton.clicked.connect(self.endStatus)
        

    def startStatus(self):
        value = self.comboBox.currentText()
        sector = self.spinBox.value()
        print('Processing...')
        
    def startMagic(self):
        value = self.comboBox.currentText()
        sector = self.spinBox.value()

#CHECK ALL LAYERS FUNCTION Fields
        def checkLayer(layerName,fieldList):
            
            if QgsProject.instance().mapLayersByName('Error_'+layerName):
                QgsProject.instance().removeMapLayer(QgsProject.instance().mapLayersByName('Error_'+layerName)[0])

            Lyr = QgsProject.instance().mapLayersByName(layerName)
            Features = []
            dSector = []
            featArr = []
            listID = []
            dpIDs = []

            paFeatures = []
            dpFeatures = []
            chFeatures = []
            cabFeatures = []
            dFeatures = []
            dsFeatures = []
            fFeatures = []
            fsFeatures = []
            mFeatures = []
            msFeatures = []
            
#Select features by sector
            for wz in QgsProject.instance().mapLayersByName('Distribution Sectors')[0].getFeatures():
                if wz['fid'] == sector:
                    dSector.append(wz)
                    for Lfeat in Lyr[0].getFeatures():
                        if Lfeat.geometry().intersects(wz.geometry()):
                            Features.append(Lfeat)

#Make list of secondary Dp's
            for dp in QgsProject.instance().mapLayersByName('Demand point')[0].getFeatures():
                if dp['Connection'] == 'secondary':
                    dpIDs.append(dp['ID'])

#Check fields not null and correct values
            for feature in Features:
                for field in fieldList:
                    if feature[field] == NULL or feature[field] == 'NULL' or feature[field] == 'Null' or feature[field] == 'NA' or feature[field] == 'N/A' or feature[field] == 'n/a' or feature[field] == 'NaN' or feature[field] == '':
                        feature['Comments'] = str(feature['Comments'])+'\n'+field+' is not populated'
                        if feature not in featArr:
                            featArr.append(feature)
                    elif field == 'AsBuiltYN' and feature[field] != 'Y' and feature[field] != 'N':
                        feature['Comments'] = str(feature['Comments'])+'\n'+field+' is not "Y" or "N"'
                        if feature not in featArr:
                            featArr.append(feature)
                    elif field == 'TrenchYN' and feature[field] != 'Y' and field =='TrenchYN' and feature[field] != 'N':
                        feature['Comments'] = str(feature['Comments'])+'\n'+field+' is not "Y" or "N"'
                        if feature not in featArr:
                            featArr.append(feature)
                    elif field == 'PrivateYN' and feature[field] != 'Y' and field =='PrivateYN' and feature[field] != 'N':
                        feature['Comments'] = str(feature['Comments'])+'\n'+field+' is not "Y" or "N"'
                        if feature not in featArr:
                            featArr.append(feature)
                    elif field == 'RB' and feature[field] != 'R' and field =='RB' and feature[field] != 'B':
                        feature['Comments'] = str(feature['Comments'])+'\n'+field+' is not "R" or "B"'
                        if feature not in featArr:
                            featArr.append(feature)
 #verify business has secondary DP                
                    elif field == 'RB' and feature['RB'] == 'B' and feature['SecondaryDP'] not in dpIDs:
                        feature['Comments'] = str(feature['Comments'])+'\n'+"SecondaryDP not in list of Secondary DP's"
                        if feature not in featArr:
                            featArr.append(feature)  

#Check ID is unique
                if feature['ID'] not in listID:
                    listID.append(feature['ID'])
                else:
                    feature['Comments'] = str(feature['Comments'])+'\n'+'ID is not unique'
                    if feature not in featArr:
                        featArr.append(feature)

                
#verify address is concatenation of prefix,street,number,roadtype,suffix
                if layerName == 'Postal address':
                    address = str(feature['StreetNum'])+' '+str(feature['DirectionalPrefix'])+' '+str(feature['Street'])+' '+str(feature['RoadType'])+' '+str(feature['DirectionalSuffix'])
                    address = address.replace('NULL ','').replace('NULL','').rstrip()
                    #address = address.replace('NULL','')
                    #address = address.rstrip()

                    if str(feature['Address']) != str(address):
                        feature['Comments'] = str(feature['Comments'])+'\n'+"Address is not concat(StreetNum,DirectionalPrefix,Street,RoadType,DirecitonalSuffix)"
                        if feature not in featArr:
                            featArr.append(feature)

#Verify Suite == concat(unitType,UnitNum)and suite populated if address duplicate   FIX unindent line (remove162), 163, (remove168) unindent 169-177

                    addressArr = []
                    suiteArr = []

                    for feature in Features:
                        addressArr.append(feature['Address'])
                        
                    dupes = [num for num in addressArr if addressArr.count(num) > 1]
                    ud = list(set(dupes))

                    for feature in Features:
                        for u in ud:
                            if feature['Address'] == u:
                                cc = str(feature['Address'])+' '+str(feature['Suite'])
                                suiteArr.append(cc)
                                typeAndNum = str(feature['UnitType'])+' '+str(feature['UnitNum'])
                                if feature['Suite'] != typeAndNum:
                                    feature['Comments'] = str(feature['Comments'])+'\n'+"Suite is not concat(UnitType,' ',UnitNum)"
                                    if feature not in featArr:
                                        featArr.append(feature)

                    dupes = [num for num in suiteArr if suiteArr.count(num) > 1]
                    ud2 = list(set(dupes))
                    #print(ud2)

                    for feature in Features:
                        for c in ud2:
                            if str(feature['Address'])+' '+str(feature['Suite']) == c:
                                #print(feature['ID']+' has duplicate suite and address')
                                feature['Comments'] = str(feature['Comments'])+'\n'+"Suite is not unique for this address"
                                if feature not in featArr:
                                    featArr.append(feature)

#DP 
######################################################################################################################################################
                                
#Check correct unit count and duct size
                if layerName == 'Demand point':
                    #dpLyr = QgsProject.instance().mapLayersByName('Demand point')
                    paFeats = []
                    for pa in QgsProject.instance().mapLayersByName('Postal address')[0].getFeatures():
                        if pa.geometry().intersects(dSector[0].geometry()):
                            paFeats.append(pa)
                    paMap = []
                    #paMap2 = []
                    dpMap = []
                    dpMap2 = []
                    dpWrongUC = []

                    #for dp in Features:
                    if feature['Connection'] == 'primary' and feature['Style'] == 'Primary':
                        dpMap.append({'id':feature['ID'],'uc':feature['UnitCount']})
                    #for dp in dpLyr[0].getFeatures():
                    elif feature['Connection'] == 'secondary' and feature['Style'] == 'Secondary':
                        dpMap2.append({'id':feature['ID'],'uc':feature['UnitCount']})
                    for pa in paFeats:
                        paMap.append({'id':pa['ID'],'primaryDP':pa['PrimaryDP'],'secondaryDP':pa['SecondaryDP']})

                    for dp in dpMap:
                        count = 0
                        for pa in paMap:
                            if pa['primaryDP'] == dp['id']:
                                count+=1
                            if pa['secondaryDP'] == dp['id']:
                                count+=1
                        if dp['uc'] != count:
                            dpWrongUC.append(dp['id'])

                    #for feature in Features:
                    for dp in dpWrongUC:
                        if feature['ID'] == dp:
                            feature['Comments'] = str(feature['Comments'])+'\n'+'DP has wrong UnitCount'
                            if feature not in featArr:
                                featArr.append(feature)

#Check DP Type is valid
                    #for feature in Features:
                    if feature['Type'] == 'SFH' and feature['UnitCount'] == 1:
                        for pa in paFeats:
                            if pa['PrimaryDP'] == feature['ID']:
                                if pa['RB'] != 'R' or pa['PrivateYN'] != 'N':
                                    feature['Comments'] = str(feature['Comments'])+'\n'+'Type is invalid for address R/B, PrivateYN'
                                    if feature not in featArr:
                                        featArr.append(feature)
                    elif feature['Type'] == 'SFH':
                        feature['Comments'] = str(feature['Comments'])+'\n'+'Type is invalid for UnitCount'
                        if feature not in featArr:
                            featArr.append(feature)
                    if feature['Type'] == 'Single commercial' and feature['UnitCount'] == 1:
                        for pa in paFeats:
                            if pa['PrimaryDP'] == feature['ID']:
                                if pa['RB'] != 'B' or pa['PrivateYN'] != 'N':
                                    feature['Comments'] = str(feature['Comments'])+'\n'+'Type is invalid for address R/B, PrivateYN'
                                    if feature not in featArr:
                                        featArr.append(feature)
                    elif feature['Type'] == 'Single commercial':
                        feature['Comments'] = str(feature['Comments'])+'\n'+'Type is invalid for UnitCount'
                        if feature not in featArr:
                            featArr.append(feature)
                    if feature['Type'] == 'Duplex commercial' and feature['UnitCount'] == 2:
                        for pa in paFeats:
                            if pa['PrimaryDP'] == feature['ID']:
                                if pa['RB'] != 'B' or pa['PrivateYN'] != 'N':
                                    feature['Comments'] = str(feature['Comments'])+'\n'+'Type is invalid for address R/B, PrivateYN'
                                    if feature not in featArr:
                                        featArr.append(feature)
                    elif feature['Type'] == 'Duplex commercial':
                        feature['Comments'] = str(feature['Comments'])+'\n'+'Type is invalid for UnitCount'
                        if feature not in featArr:
                            featArr.append(feature)
                    if feature['Type'] == 'Duplex residential'and feature['UnitCount'] == 2:
                        for pa in paFeats:
                            if pa['PrimaryDP'] == feature['ID']:
                                if pa['RB'] != 'R' or pa['PrivateYN'] != 'N':
                                    feature['Comments'] = str(feature['Comments'])+'\n'+'Type is invalid for address R/B, PrivateYN'
                                    if feature not in featArr:
                                        featArr.append(feature)
                    elif feature['Type'] == 'Duplex residential':
                        feature['Comments'] = str(feature['Comments'])+'\n'+'Type is invalid for UnitCount'
                        if feature not in featArr:
                            featArr.append(feature)
                    if feature['Type'] == 'HOA'and feature['UnitCount'] > 1:
                        for pa in paFeats:
                            if pa['PrimaryDP'] == feature['ID']:
                                if pa['RB'] != 'R' or pa['PrivateYN'] != 'Y':
                                    feature['Comments'] = str(feature['Comments'])+'\n'+'Type is invalid for address R/B, PrivateYN'
                                    if feature not in featArr:
                                        featArr.append(feature)
                    elif feature['Type'] == 'HOA':
                        feature['Comments'] = str(feature['Comments'])+'\n'+'Type is invalid for UnitCount'
                        if feature not in featArr:
                            featArr.append(feature)
                    if feature['Type'] == 'MBU'and feature['UnitCount'] > 1:
                        for pa in paFeats:
                            if pa['PrimaryDP'] == feature['ID']:
                                if pa['RB'] != 'B' or pa['PrivateYN'] != 'Y':
                                    feature['Comments'] = str(feature['Comments'])+'\n'+'Type is invalid for address R/B, PrivateYN'
                                    if feature not in featArr:
                                        featArr.append(feature)
                    elif feature['Type'] == 'MBU':
                        feature['Comments'] = str(feature['Comments'])+'\n'+'Type is invalid for UnitCount'
                        if feature not in featArr:
                            featArr.append(feature)
                    if feature['Type'] == 'MDU 3-12'and feature['UnitCount'] >2 and feature['UnitCount'] <13 :
                        for pa in paFeats:
                            if pa['PrimaryDP'] == feature['ID']:
                                if pa['RB'] != 'R' or pa['PrivateYN'] != 'Y':
                                    feature['Comments'] = str(feature['Comments'])+'\n'+'Type is invalid for address R/B, PrivateYN'
                                    if feature not in featArr:
                                        featArr.append(feature)
                    elif feature['Type'] == 'MDU 3-12':
                        feature['Comments'] = str(feature['Comments'])+'\n'+'Type is invalid for UnitCount'
                        if feature not in featArr:
                            featArr.append(feature)
                    if feature['Type'] == 'MDU 13-24'and feature['UnitCount'] >12 and feature['UnitCount'] <25:
                        for pa in paFeats:
                            if pa['PrimaryDP'] == feature['ID']:
                                if pa['RB'] != 'R' or pa['PrivateYN'] != 'Y':
                                    feature['Comments'] = str(feature['Comments'])+'\n'+'Type is invalid for address R/B, PrivateYN'
                                    if feature not in featArr:
                                        featArr.append(feature)
                    elif feature['Type'] == 'MDU 13-24':
                        feature['Comments'] = str(feature['Comments'])+'\n'+'Type is invalid for UnitCount'
                        if feature not in featArr:
                            featArr.append(feature)
                    if feature['Type'] == 'MDU 25-36'and feature['UnitCount'] >24 and feature['UnitCount'] <37:
                        for pa in paFeats:
                            if pa['PrimaryDP'] == feature['ID']:
                                if pa['RB'] != 'R' or pa['PrivateYN'] != 'Y':
                                    feature['Comments'] = str(feature['Comments'])+'\n'+'Type is invalid for address R/B, PrivateYN'
                                    if feature not in featArr:
                                        featArr.append(feature)
                    elif feature['Type'] == 'MDU 25-36':
                        feature['Comments'] = str(feature['Comments'])+'\n'+'Type is invalid for UnitCount'
                        if feature not in featArr:
                            featArr.append(feature)
                    if feature['Type'] == 'MDU 37-48'and feature['UnitCount'] >36 and feature['UnitCount'] <49:
                        for pa in paFeats:
                            if pa['PrimaryDP'] == feature['ID']:
                                if pa['RB'] != 'R' or pa['PrivateYN'] != 'Y':
                                    feature['Comments'] = str(feature['Comments'])+'\n'+'Type is invalid for address R/B, PrivateYN'
                                    if feature not in featArr:
                                        featArr.append(feature)
                    elif feature['Type'] == 'MDU 37-48':
                        feature['Comments'] = str(feature['Comments'])+'\n'+'Type is invalid for UnitCount'
                        if feature not in featArr:
                            featArr.append(feature)
                    if feature['Type'] == 'MDU >48'and feature['UnitCount'] >48:
                        for pa in paFeats:
                            if pa['PrimaryDP'] == feature['ID']:
                                if pa['RB'] != 'R' or pa['PrivateYN'] != 'Y':
                                    feature['Comments'] = str(feature['Comments'])+'\n'+'Type is invalid for address R/B, PrivateYN'
                                    if feature not in featArr:
                                        featArr.append(feature)
                    elif feature['Type'] == 'MDU >48':
                        feature['Comments'] = str(feature['Comments'])+'\n'+'Type is invalid for UnitCount'
                        if feature not in featArr:
                            featArr.append(feature)
                    if feature['Type'] == 'Mixed'and feature['UnitCount'] > 1:
                        for pa in paFeats:
                            if pa['PrimaryDP'] == feature['ID']:
                                if pa['RB'] != 'R' or pa['PrivateYN'] != 'Y':
                                    feature['Comments'] = str(feature['Comments'])+'\n'+'Type is invalid for address R/B, PrivateYN'
                                    if feature not in featArr:
                                        featArr.append(feature)
                    elif feature['Type'] == 'Mixed':
                        feature['Comments'] = str(feature['Comments'])+'\n'+'Type is invalid for UnitCount'
                        if feature not in featArr:
                            featArr.append(feature)
                    if feature['Type'] == 'Vacant lot'and feature['UnitCount'] == 0:
                        for pa in paFeats:
                            if pa['PrimaryDP'] == feature['ID']:
                                feature['Comments'] = str(feature['Comments'])+'\n'+'Type is invalid for address R/B, PrivateYN'
                                if feature not in featArr:
                                    featArr.append(feature)
                    elif feature['Type'] == 'Vacant lot' and feature['UnitCount'] != 0:
                        feature['Comments'] = str(feature['Comments'])+'\n'+'Type is invalid for UnitCount'
                        if feature not in featArr:
                            featArr.append(feature)
                    if feature['Type'] == 'Smart City Point'and feature['UnitCount'] == 0:
                        for pa in paFeats:
                            if pa['PrimaryDP'] == feature['ID']:
                                feature['Comments'] = str(feature['Comments'])+'\n'+'Type is invalid for address R/B, PrivateYN'
                                if feature not in featArr:
                                    featArr.append(feature)
                    elif feature['Type'] == 'Smart City Point' and feature['UnitCount'] != 0:
                        feature['Comments'] = str(feature['Comments'])+'\n'+'Type is invalid for UnitCount'
                        if feature not in featArr:
                            featArr.append(feature)


#Check DP Type(single/duplex) PrivateName is populated
 #                   for feature in Features:
                    if feature['Type'] == 'HOA':
                        if feature['PrivateName']== NULL or feature['PrivateName'] == 'NULL' or feature['PrivateName'] == 'Null' or feature['PrivateName'] == 'NA' or feature['PrivateName'] == 'N/A' or feature['PrivateName'] == 'n/a' or feature['PrivateName'] == 'NaN' or feature['PrivateName'] == '':
                            feature['Comments'] = str(feature['Comments'])+'\n'+'PrivateName is not populated for Type HOA'
                            if feature not in featArr:
                                featArr.append(feature)
#Check DP Type (Single/Duplex) PrivateRecordID is populated.
                    for pa in paFeats:
                        if pa['PrivateYN'] == 'Y':
                            #for feature in Features:
                            if pa['PrimaryDP'] == feature['ID']:
                                if feature['PrivateRecordID']== NULL or feature['PrivateRecordID'] == 'NULL' or feature['PrivateRecordID'] == 'Null' or feature['PrivateRecordID'] == 'NA' or feature['PrivateRecordID'] == 'N/A' or feature['PrivateRecordID'] == 'n/a' or feature['PrivateRecordID'] == 'NaN' or feature['PrivateRecordID'] == '':
                                    feature['Comments'] = str(feature['Comments'])+'\n'+'PrivateRecordID is not populated for Address PrivateYN=Y'
                                    if feature not in featArr:
                                        featArr.append(feature)
                                    
        #Check DP has correct Duct size/count

                    ductCount = 1
                    ductSize = '7/4','6/3'
                    if feature['UnitCount'] >12:
                        ductCount+=1
                    if feature['UnitCount'] >24:
                        ductCount+=1
                    if feature['UnitCount'] >36:
                        ductCount+=1
                    if feature['UnitCount'] >48:
                        ductCount = 1
                        ductSize = '16/12'
                    if feature['UnitCount'] >144:
                        ductCount+=1
                    if feature['UnitCount'] >288:
                        feature['Comments'] = str(feature['Comments'])+'\n'+'DP has over 288 units'
                        if feature not in featArr:
                            featArr.append(feature)
                    if feature['UnitCount'] <0 and feature['Type'] != 'Vacant lot':
                        feature['Comments'] = str(feature['Comments'])+'\n'+'DP has no units'
                        if feature not in featArr:
                            featArr.append(feature)    
                    if feature['DuctSize'] != ductSize:
                        feature['Comments'] = str(feature['Comments'])+'\n'+'DP has wrong DuctSize'
                        if feature not in featArr:
                            featArr.append(feature)
                    if feature['DuctCount'] != ductCount:
                        feature['Comments'] = str(feature['Comments'])+'\n'+'DP has wrong DuctCount'
                        if feature not in featArr:
                            featArr.append(feature)
#############################################################################################################################################################


        #check Chamber loading
                if layerName == 'Chamber':
                    ductArr = []
                    cabDuctArr1 = []
                    cabDuctArr2 = []
                    for fs in QgsProject.instance().mapLayersByName('Feeder segment')[0].getFeatures():
                        if feature['ID'] == fs['AEnd'] or feature['ID'] == fs['BEnd']:
                            ductArr.append(feature['ID'])
                            if feature['Type'] == 'Cabinet':
                                cabDuctArr1.append(feature['ID'])
                    for ms in QgsProject.instance().mapLayersByName('Metro segment')[0].getFeatures():
                        if feature['ID'] == ms['AEnd'] or feature['ID'] == ms['BEnd']:
                            ductArr.append(feature['ID'])
                            if feature['Type'] == 'Cabinet':
                                cabDuctArr2.append(feature['ID'])
                    if len(ductArr) > 16:
                        feature['Comments'] = str(feature['Comments'])+'\n'+'Chamber overloaded'
                        if feature not in featArr:
                            featArr.append(feature)
                    if len(cabDuctArr1) > 8 or len(cabDuctArr2) > 6:
                        feature['Comments'] = str(feature['Comments'])+'\n'+'Chamber overloaded'
                        if feature not in featArr:
                            featArr.append(feature)
                            
                            
        #check that two Chambers exist for each Cabinet
                if layerName == 'Cabinet':
                    #for cab in Features:
                    cabCH = []
                    for ch in QgsProject.instance().mapLayersByName('Chamber')[0].getFeatures():
                        if ch.geometry().intersects(dSector[0].geometry()):
                            chFeatures.append(ch)
                    for ch in chFeatures:
                        if ch['Connection'] == 'Cabinet':
                            if feature['ID'] == ch['CabinetID']:
                                cabCH.append(ch['ID'])
                    if len(cabCH) != 2:
                        feature['Comments'] = str(feature['Comments'])+'\n'+'Cabinet does not have two Chambers'
                        if feature not in featArr:
                            featArr.append(feature)
        #check Chamber type IN (Splice,Branch,Cabinet,Hut)
        #check chamber size valid#check chamber cabID exists if populated
        #check Cab chambers have CabID field populated
        #check Hut chambers have CabID field populated
                if layerName == 'Chamber':
                    #for feature in Features:
                    if feature['Type'] == 'Splice':
                        distArr = []
                        if feature['Connection'] != 'primary' and feature['Connection'] != 'secondary':
                            feature['Comments'] = str(feature['Comments'])+'\n'+'Connection does not match Type'
                            if feature not in featArr:
                                featArr.append(feature)
                        for dist in QgsProject.instance().mapLayersByName('Distribution')[0].getFeatures():
                            if dist['BEnd'] == feature['ID']:
                                distArr.append(feature['ID'])
                                for dp in QgsProject.instance().mapLayersByName('Demand point')[0].getFeatures():
                                    if dp['ID'] == dist['AEnd']:
                                        if dp['Connection'] != feature['Connection']:
                                            feature['Comments'] = str(feature['Comments'])+'\n'+'Connection does not match served DP connection'
                                            if feature not in featArr:
                                                featArr.append(feature)
                        if len(distArr) <1:
                            feature['Comments'] = str(feature['Comments'])+'\n'+'Splice chamber has no distribution'
                            if feature not in featArr:
                                featArr.append(feature)
                    if feature['Type'] == 'Branch':
                        if feature['Connection'] != '<NULL>' and feature['Connection'] != 'primary':
                            feature['Comments'] = str(feature['Comments'])+'\n'+'Connection does not match Type(Branch)'
                            if feature not in featArr:
                                featArr.append(feature)
                        if feature['Size'] != '24x36x24':
                            feature['Comments'] = str(feature['Comments'])+'\n'+"Size does not match Type"
                            if feature not in featArr:
                                featArr.append(feature)
                        for dist in QgsProject.instance().mapLayersByName('Distribution')[0].getFeatures():
                            if dist['BEnd'] == feature['ID']:
                                feature['Comments'] = str(feature['Comments'])+'\n'+'Branch chamber has distribution'
                                if feature not in featArr:
                                    featArr.append(feature)
                    if feature['Type'] == 'Cabinet':
                        if feature['Connection'] != 'Cabinet':
                            feature['Comments'] = str(feature['Comments'])+'\n'+'Cabinet chamber Type does not match Connection'
                            if feature not in featArr:
                                featArr.append(feature)
                        if feature['CabinetID'] == 'NULL' or feature[field] == 'Null' or feature[field] == 'NA' or feature[field] == 'N/A' or feature[field] == 'n/a' or feature[field] == 'NaN' or feature[field] == '':
                            feature['Comments'] = str(feature['Comments'])+'\n'+"Cabinet chamber's CabinetID is not populated"
                            if feature not in featArr:
                                featArr.append(feature)
                        for f in QgsProject.instance().mapLayersByName('Cabinet')[0].getFeatures():
                            unmatchedCB = []
                            unmatchedCB.append(f)
                            cabCh = []
                            if feature['CabinetID'] == f['ID']:
                                cabCh.append(feature['ID'])
                            #else:
                            if len(unmatchedCB)>0:
                                for cb in unmatchedCB:
                                    feature['Comments'] = str(feature['Comments'])+'\n'+"CabinetID does not exist in Cabinet list"
                                    if feature not in featArr:
                                        featArr.append(feature)
                    if feature['Type'] == 'Hut':
                        if feature['Connection'] != 'Hut':
                            feature['Comments'] = str(feature['Comments'])+'\n'+'Hut chamber Type does not match Connection'
                            if feature not in featArr:
                                featArr.append(feature)
                        if feature['CabinetID'] == NULL or feature[field] == 'NULL' or feature[field] == 'Null' or feature[field] == 'NA' or feature[field] == 'N/A' or feature[field] == 'n/a' or feature[field] == 'NaN' or feature[field] == '':
                            feature['Comments'] = str(feature['Comments'])+'\n'+"Hut chamber's CabinetID is not populated"
                            if feature not in featArr:
                                featArr.append(feature)
                        for f in QgsProject.instance().mapLayersByName('Hut')[0].getFeatures():
                            cabCh = []
                            if feature['CabinetID'] == f['ID']:
                                cabCh.append(feature['ID'])
                            else:
                                feature['Comments'] = str(feature['Comments'])+'\n'+"CabinetID does not exist in Hut list"
                                if feature not in featArr:
                                    featArr.append(feature)
                                    
                    if feature['Connection'] == 'secondary':
                        if feature['Type'] != 'Splice':
                            feature['Comments'] = str(feature['Comments'])+'\n'+"Connection does not match Type"
                            if feature not in featArr:
                                featArr.append(feature)
                        if feature['Size'] != '24x36x24':
                            feature['Comments'] = str(feature['Comments'])+'\n'+"Size does not match Type"
                            if feature not in featArr:
                                featArr.append(feature)
                    if feature['Connection'] == 'Cabinet':
                        if feature['Type'] != 'Cabinet':
                            feature['Comments'] = str(feature['Comments'])+'\n'+"Connection does not match Type"
                            if feature not in featArr:
                                featArr.append(feature)
                        if feature['Size'] != '30x48x36':
                            feature['Comments'] = str(feature['Comments'])+'\n'+"Size does not match Type"
                            if feature not in featArr:
                                featArr.append(feature)
                    if feature['Connection'] == 'Hut':
                        if feature['Type'] != 'Hut':
                            feature['Comments'] = str(feature['Comments'])+'\n'+"Connection does not match Type"
                            if feature not in featArr:
                                featArr.append(feature)
                        if feature['Size'] != '30x48x36':
                            feature['Comments'] = str(feature['Comments'])+'\n'+"Size does not match Type"
                            if feature not in featArr:
                                featArr.append(feature)


                if layerName == 'Distribution':

                    aends = []
                    bends = []
        #Check DistGroup Type Exists in DistributionGroupType
                    if feature['Type'] != 'Distribution':
                        feature['Comments'] = str(feature['Comments'])+'\n'+"Type is not 'Distribution'"
                        if feature not in featArr:
                            featArr.append(feature)
                            
        #Check DistGroup AEnd is populated and exists in DP Table
        #Check DistGroup BEnd is populated and exists in Chamber Table
                            
                    for feat in QgsProject.instance().mapLayersByName('Demand point')[0].getFeatures():
                        if feature['AEnd'] == feat['ID']:
                            aends.append(feature['AEnd'])
                    if len(aends) < 1:
                        feature['Comments'] = str(feature['Comments'])+'\n'+"AEnd does not exist in Demand points list"
                        if feature not in featArr:
                            featArr.append(feature)
                    for feat in QgsProject.instance().mapLayersByName('Chamber')[0].getFeatures():
                        if feature['BEnd'] == feat['ID']:
                            bends.append(feature['BEnd'])
                    if len(bends) <1:
                        feature['Comments'] = str(feature['Comments'])+'\n'+"BEnd does not exist in Chamber list"
                        if feature not in featArr:
                            featArr.append(feature)
                        
                            
                if layerName == 'Distribution segment':
                    aends = []
                    bends = []
                    branchCHs = []
                    for b in QgsProject.instance().mapLayersByName('Chamber')[0].getFeatures():
                        if b['Type'] == 'Branch':
                            branchCHs.append(b['ID'])
        #Check DistSeg AEnd Exists in Dp or Chamber Table
        #Check DistSeg BEnd Exists in Chamber Table

                    for feat in QgsProject.instance().mapLayersByName('Demand point')[0].getFeatures():
                        if feature['AEnd'] == feat['ID']:
                            aends.append(feature['AEnd'])
                    for branchCH in branchCHs:
                        if feature['AEnd'] == branchCH:
                            aends.append(feature['AEnd'])
                    if len(aends) < 1:
                        feature['Comments'] = str(feature['Comments'])+'\n'+"AEnd does not exist in Demand points or Branch Chamber lists"
                        if feature not in featArr:
                            featArr.append(feature)
                    for feat in QgsProject.instance().mapLayersByName('Chamber')[0].getFeatures():
                        if feature['BEnd'] == feat['ID']:
                            bends.append(feature['BEnd'])
                    if len(bends) <1:
                        feature['Comments'] = str(feature['Comments'])+'\n'+"BEnd does not exist in Chamber list"
                        if feature not in featArr:
                            featArr.append(feature)  

        #Check Ring FeederGroup AEnd is populated and Exists in Chamber Table as a Cabinet Chamber
        #Check Ring FeederGroup BEnd is populated and Exists in Chamber Table as a Cabinet Chamber

                
                if layerName == 'Feeder':
                    aends = []
                    bends = []
                    if feature['Type'] == 'RING':
                        cabCHs = []
                        for c in QgsProject.instance().mapLayersByName('Chamber')[0].getFeatures():
                            if c['Type'] == 'Cabinet':
                                cabCHs.append(c['ID'])
                        for cabCH in cabCHs:
                            if feature['AEnd'] == cabCH:
                                aends.append(feature['AEnd'])
                        if len(aends) < 1:
                            feature['Comments'] = str(feature['Comments'])+'\n'+"AEnd does not exist in Cabinet Chamber list"
                            if feature not in featArr:
                                featArr.append(feature)
                        for cabCH in cabCHs:
                            if feature['BEnd'] == cabCH:
                                bends.append(feature['BEnd'])
                        if len(bends) <1:
                            feature['Comments'] = str(feature['Comments'])+'\n'+"BEnd does not exist in Cabinet Chamber list"
                            if feature not in featArr:
                                featArr.append(feature)
                    else:
                        for feat in QgsProject.instance().mapLayersByName('Chamber')[0].getFeatures():
                            if feature['AEnd'] == feat['ID']:
                                aends.append(feature['AEnd'])
                        if len(aends) < 1:
                            feature['Comments'] = str(feature['Comments'])+'\n'+"AEnd does not exist in Chamber list"
                            if feature not in featArr:
                                featArr.append(feature)
                        for feat in QgsProject.instance().mapLayersByName('Chamber')[0].getFeatures():
                            if feature['BEnd'] == feat['ID']:
                                bends.append(feature['BEnd'])
                        if len(bends) < 1:
                            feature['Comments'] = str(feature['Comments'])+'\n'+"BEnd does not exist in Chamber list"
                            if feature not in featArr:
                                featArr.append(feature)


        #Check FeederSeg AEnd exists in Chamber Table
        #Check FeederSeg BEnd exists in Chamber Table


                if layerName == 'Feeder segment':
                    aends = []
                    bends = []
                    for feat in QgsProject.instance().mapLayersByName('Chamber')[0].getFeatures():
                        if feature['AEnd'] == feat['ID']:
                            aends.append(feature['AEnd'])
                    if len(aends) < 1:
                        feature['Comments'] = str(feature['Comments'])+'\n'+"AEnd does not exist in Chamber list"
                        if feature not in featArr:
                            featArr.append(feature)
                    for feat in QgsProject.instance().mapLayersByName('Chamber')[0].getFeatures():
                        if feature['BEnd'] == feat['ID']:
                            bends.append(feature['BEnd'])
                    if len(bends) <1:
                        feature['Comments'] = str(feature['Comments'])+'\n'+"BEnd does not exist in Chamber list"
                        if feature not in featArr:
                            featArr.append(feature)     
                    
        #Check MetroGroup AEnd is populated and exists in the Chamber table
        #Check MetroGroup BEnd is populated and exists in the Chamber table

            
                if layerName == 'Metro':
                    aends = []
                    bends = []
                    for feat in QgsProject.instance().mapLayersByName('Chamber')[0].getFeatures():
                        if feature['AEnd'] == feat['ID']:
                            aends.append(feature['AEnd'])
                    if len(aends) < 1:
                        feature['Comments'] = str(feature['Comments'])+'\n'+"AEnd does not exist in Chamber list"
                        if feature not in featArr:
                            featArr.append(feature)
                    for feat in QgsProject.instance().mapLayersByName('Chamber')[0].getFeatures():
                        if feature['BEnd'] == feat['ID']:
                            bends.append(feature['BEnd'])
                    if len(bends) <1:
                        feature['Comments'] = str(feature['Comments'])+'\n'+"BEnd does not exist in Chamber list"
                        if feature not in featArr:
                            featArr.append(feature) 
                
        #Check MetroSeg AEnd exists in Chamber Table
        #Check MetroSeg BEnd exists in Chamber Table
                
                if layerName == 'Metro segment':
                    aends = []
                    bends = []
                    for feat in QgsProject.instance().mapLayersByName('Chamber')[0].getFeatures():
                        if feature['AEnd'] == feat['ID']:
                            aends.append(feature['AEnd'])
                    if len(aends) < 1:
                        feature['Comments'] = str(feature['Comments'])+'\n'+"AEnd does not exist in Chamber list"
                        if feature not in featArr:
                            featArr.append(feature)
                    for feat in QgsProject.instance().mapLayersByName('Chamber')[0].getFeatures():
                        if feature['BEnd'] == feat['ID']:
                            bends.append(feature['BEnd'])
                    if len(bends) <1:
                        feature['Comments'] = str(feature['Comments'])+'\n'+"BEnd does not exist in Chamber list"
                        if feature not in featArr:
                            featArr.append(feature) 




############################################################################################################################################################
############################################################################################################################################################


#Make error Layer
            if layerName == 'Chamber' or layerName == 'Demand point' or layerName == 'Postal address':
                errLyr = QgsVectorLayer('Point?crs=EPSG:3857','Error_'+layerName,'memory')
            elif layerName == 'Cabinet' or layerName == 'Hut':
                errLyr = QgsVectorLayer('PointZ?crs=EPSG:3857','Error_'+layerName,'memory')
            elif layerName == 'Distribution' or layerName == 'Distribution segment' or layerName == 'Feeder' or layerName == 'Feeder segment' or layerName == 'Metro' or layerName == 'Metro segment':
                errLyr = QgsVectorLayer('LineString?crs=EPSG:3857','Error_'+layerName,'memory')

            fields = Lyr[0].fields()
            for e in fields:
                name = e.name()
                type = e.type()
                field = QgsField(name,type)
                errLyr.dataProvider().addAttributes([field])
        #        errLyr.dataProvider().addAttributes('ERROR')
                errLyr.updateFields()
                    
            QgsProject.instance().addMapLayer(errLyr)
            for f in featArr:
                errLyr.startEditing()
                errLyr.addFeature(f)
                errLyr.commitChanges()

#TRIAGE
        if value == 'Stage 1 Testing - (Postal address)':
            PostalAddressFieldsList = ['CityIdentifier','ID','TrenchYN','RB','City','State','Zip','PrivateYN','PrimaryDP','AsBuiltYN','RooftopLat','RooftopLong']
            checkLayer('Postal address',PostalAddressFieldsList)
        if value == 'Stage 1 Testing - (Demand point)':
            DemandPointFieldsList = ['CityIdentifier','ID','AsBuiltYN','Type']
            checkLayer('Demand point',DemandPointFieldsList)
        if value == 'Stage 2 Testing - (Chamber)':
            ChamberFieldsList = ['CityIdentifier','ID','AsBuiltYN']
            checkLayer('Chamber',ChamberFieldsList)


        if value == 'Stage 3 Testing - (Cabinet)':
            CabinetFieldsList = ['CityIdentifier','ID','AsBuiltYN']
            checkLayer('Cabinet',CabinetFieldsList)
        if value == 'Stage 3 Testing - (Hut)':
            HutFieldsList = ['CityIdentifier','ID','AsBuiltYN']
            checkLayer('Hut',HutFieldsList)
        if value == 'Stage 2 Testing - (Distribution)':       
           DistributionFieldsList = ['CityIdentifier','ID','Group','AEnd','BEnd','AsBuiltYN']
           checkLayer('Distribution',DistributionFieldsList)
        if value == 'Stage 2 Testing - (Distribution segment)':
           DistributionSegmentFieldsList = ['CityIdentifier','ID','Group','AEnd','BEnd','AsBuiltYN']
           checkLayer('Distribution segment',DistributionSegmentFieldsList)
        if value == 'Stage 3 Testing - (Feeder)':
           FeederFieldsList = ['CityIdentifier','ID','Group','AEnd','BEnd','AsBuiltYN']
           checkLayer('Feeder',FeederFieldsList)
        if value == 'Stage 3 Testing - (Feeder segment)':
           FeederSegmentFieldsList = ['CityIdentifier','ID','Group','AEnd','BEnd','AsBuiltYN']
           checkLayer('Feeder segment',FeederSegmentFieldsList)
        if value == 'Stage 3 Testing - (Metro)':
           MetroFieldsList = ['CityIdentifier','ID','Group','AEnd','BEnd','AsBuiltYN']
           checkLayer('Metro',MetroFieldsList)
        if value == 'Stage 3 Testing - (Metro segment)':
           MetroSegmentFieldsList = ['CityIdentifier','ID','Group','AEnd','BEnd','AsBuiltYN']
           checkLayer('Metro segment',MetroSegmentFieldsList)

    def endStatus(self):
        value = self.comboBox.currentText()
        sector = self.spinBox.value()
        self.textBrowser.append("Completed "+value+" on Sector "+str(sector)+"...")
       


